?start: program
program: statement+

// =========================
// Statements
// =========================

statement: annotation? (var_decl | assignment | print_stmt)
annotation: "@" NAME

// Declaração de variável
var_decl: type NAME "=" expr

// Atribuição simples ou composta
assignment: NAME assign_op expr
assign_op: "=" cast?         -> simple_assign
         | ASSIGN_OP         -> compound_assign

ASSIGN_OP: "+=" | "-=" | "*=" | "/=" | "**=" | "%="
         | "&=" | "|=" | "^=" | "<<=" | ">>="

// Print
print_stmt: "print" "(" [print_arg ("," print_arg)*] ")"
print_arg: expr | STRING

// =========================
// Cast e tipos
// =========================

cast: "(" type ")"
type: NAME

// =========================
// Expressões
// =========================

// Ordem de precedência baseada no Python

?expr: or_expr

?or_expr: and_expr ("or" and_expr)*         -> binop_chain
?and_expr: equality ("and" equality)*       -> binop_chain
?equality: comparison (("==" | "!=") comparison)*  -> binop_chain
?comparison: bitwise_or (("<=" | ">=" | "<" | ">") bitwise_or)*  -> binop_chain
?bitwise_or: bitwise_xor ("|" bitwise_xor)*  -> binop_chain
?bitwise_xor: bitwise_and ("^" bitwise_and)*  -> binop_chain
?bitwise_and: shift ("&" shift)*             -> binop_chain
?shift: addition (("<<" | ">>") addition)*   -> binop_chain
?addition: multiplication (("+" | "-") multiplication)*  -> binop_chain
?multiplication: power (("*" | "/" | "%") power)*  -> binop_chain
?power: unary ("**" unary)*                  -> binop_chain
?unary: ("-" | "not" | "~") unary           -> unaryop
      | atom

?atom: NUMBER                -> number
     | NAME                  -> var_reference
     | "(" expr ")"

// =========================
// Tokens e ignorados
// =========================

NAME: /[a-zA-Z_][a-zA-Z0-9_:]*/
NUMBER: /\d+(\.\d+)?/
STRING: /"([^"\\]|\\.)*"/

// Ignora espaços, comentários e docstrings python-style
%ignore /\s+/
%ignore /#[^\n]*/
%ignore /""".*?"""/s